{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red155\green35\blue147;
\red28\green70\blue74;\red50\green109\blue116;\red93\green108\blue121;\red57\green0\blue160;\red108\green54\blue169;
\red196\green26\blue22;\red15\green104\blue160;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0\c85000;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c60759\c13753\c57628;
\csgenericrgb\c10981\c27276\c28869;\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c36526\c42188\c47515;\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c42190\c21278\c66379;
\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c5882\c40784\c62745;}
\paperw12240\paperh15840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3            SPARE CODE \
\
\
			 
\f1\b \cf4 let
\f0\b0 \cf2  newTopic = \cf5 Topic\cf2 (context: \cf6 viewContext\cf2 )\cf7 //original\cf2 \
            newTopic.\cf6 topicName\cf2  = \cf6 topicName\cf7 //original\
\cf2 \
            \cf7 //let newQuery = Query(context: viewContext)\cf2 \
            \cf7 //newTopic.query? = .adding(newQuery)\cf2 \
            \cf7 //var tempArray:[Query] = newTopic.queryArray\cf2 \
            \cf7 //newQuery.topic?.topicName = newTopic.topicName\cf2 \
            \
            \cf7 //tempArray.append(newQuery)\cf2 \
            \cf7 //newTopic.queryArray = tempArray\cf2 \
            \cf7 //newTopic.addToQuery(newQuery)\
\
\cf2    \cf7 //.strokeBorder(Color(red:0.6, green:0.4, blue:0.2, opacity: 1.0),lineWidth: 8)\
\
this context menu could go inside body in table view, then it would have access to topic...\
//                    .contextMenu \{\cf2 \
\cf7 //                        Button \{ print("button tapped")    \}\cf2 \
\cf7 //                            label: \{Label("Choose button",systemImage: "globe")\}\cf2 \
\cf7 //                    \}   ///above code indent is in my own style to make more compact.  This context menu does work, plus it would have access to topic...\cf2 \
                \
check which device\
                
\f1\b \cf4 if
\f0\b0 \cf2  \cf8 UIDevice\cf2 .\cf9 current\cf2 .\cf9 userInterfaceIdiom\cf2  == .\cf9 pad\cf2  \{\
                    \cf9 print\cf2 (\cf10 "iPad device"\cf2 )\
                \} 
\f1\b \cf4 else
\f0\b0 \cf2  \{\
                    \cf9 print\cf2 (\cf10 "not iPad"\cf2 )\
                \}\
\
       \cf7 //Image(systemName: "sun.haze.fill") way to access system images\
\
\cf2    @\cf8 FetchRequest\cf2 (\
        sortDescriptors: [\cf8 NSSortDescriptor\cf2 (keyPath: \\\cf5 Topic\cf2 .\cf6 topicName\cf2 , ascending: 
\f1\b \cf4 true
\f0\b0 \cf2 )],\
        animation: .\cf9 default\cf2 )\
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf11 fetchedTopics\cf2 : \cf8 FetchedResults\cf2 <\cf5 Topic\cf2 > \cf7 //FetchRequest puts the results into here\cf2 \
this was the basic fetch request, but extension to Topic now used to populate topics variable with the fetched results.\
\
ALERT  CONTROLLER\
First set up the alert:\
\
                
\f1\b \cf4 let
\f0\b0 \cf2  alert = \cf8 UIAlertController\cf2 (title: \cf10 "Confirm delete this topic and all its queries?"\cf2 ,\
                               message: \cf10 ""\cf2 ,\
                               preferredStyle: .\cf9 alert\cf2 )\
                
\f1\b \cf4 let
\f0\b0 \cf2  cancelAction = \cf8 UIAlertAction\cf2 (title: \cf10 "Cancel"\cf2 , style: .\cf9 cancel\cf2 ) \{ (handler) 
\f1\b \cf4 in
\f0\b0 \cf2 \
                          \cf9 print\cf2 (\cf10 "tapped Cancel"\cf2 )\
                            \}\
                
\f1\b \cf4 let
\f0\b0 \cf2  deleteAction = \cf8 UIAlertAction\cf2 (title: \cf10 "OK"\cf2 , style: .\cf9 destructive\cf2 ) \{ (handler) 
\f1\b \cf4 in
\f0\b0 \cf2 \
                          \cf9 print\cf2 (\cf10 "tapped OK"\cf2 )\
                    
\f1\b \cf4 self
\f0\b0 \cf2 .\cf6 parent\cf2 .\cf6 onDelete\cf2 (indexPath.\cf9 row\cf2 )\
                    tableView.\cf9 deleteRows\cf2 (at: [indexPath], with: .\cf9 automatic\cf2 )\
                    actionPerformed(
\f1\b \cf4 true
\f0\b0 \cf2 )\
\
\
                            \}\
                alert.\cf9 addAction\cf2 (cancelAction)\
                alert.\cf9 addAction\cf2 (deleteAction)\
\
Then present the alert, but need a trick to find the root view controller first\
\
         \cf7 //      let rootViewController = UIApplication.shared.keyWindow?.rootViewController\cf2 \
          \cf7 //      rootViewController?.present(alert, animated: true, completion: nil)\
\
//an optional init?() can be done, need to do init?() and also within the init block eg: \cf2      \cf7 //guard topic != nil else \{return nil\}}