{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;\f2\fmodern\fcharset0 Courier;
\f3\fnil\fcharset0 SFMono-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red155\green35\blue147;
\red28\green70\blue74;\red50\green109\blue116;\red93\green108\blue121;\red57\green0\blue160;\red108\green54\blue169;
\red196\green26\blue22;\red15\green104\blue160;\red252\green95\blue163;\red31\green31\blue36;\red255\green255\blue255;
\red93\green216\blue255;\red208\green168\blue255;\red108\green121\blue134;\red65\green161\blue192;\red208\green191\blue105;
\red103\green183\blue164;\red103\green183\blue164;\red161\green103\blue230;\red161\green103\blue230;\red252\green106\blue93;
\red11\green79\blue121;\red28\green0\blue207;\red252\green95\blue163;\red38\green38\blue41;\red242\green242\blue245;
\red255\green255\blue255;\red208\green168\blue255;\red208\green191\blue105;\red108\green121\blue134;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0\c85000;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c60759\c13753\c57628;
\csgenericrgb\c10981\c27276\c28869;\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c36526\c42188\c47515;\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c42190\c21278\c66379;
\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c36295\c84643\c99897;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c81498\c74939\c41233;
\csgenericrgb\c40392\c71765\c64314;\csgenericrgb\c40538\c71705\c64209;\csgenericrgb\c63137\c40392\c90196;\csgenericrgb\c63232\c40219\c90115;\csgenericrgb\c98912\c41558\c36568;
\csgenericrgb\c4314\c30980\c47451;\csgenericrgb\c11000\c0\c81000;\cssrgb\c100000\c47843\c69804;\cssrgb\c20000\c20000\c21176;\cssrgb\c96078\c96078\c96863;
\cssrgb\c100000\c100000\c100000;\cssrgb\c85490\c72941\c100000;\cssrgb\c85098\c78824\c48627;\cssrgb\c49804\c54902\c59608;}
\paperw12240\paperh15840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3            SPARE CODE \
\
\
			 
\f1\b \cf4 let
\f0\b0 \cf2  newTopic = \cf5 Topic\cf2 (context: \cf6 viewContext\cf2 )\cf7 //original\cf2 \
            newTopic.\cf6 topicName\cf2  = \cf6 topicName\cf7 //original\
\cf2 \
            \cf7 //let newQuery = Query(context: viewContext)\cf2 \
            \cf7 //newTopic.query? = .adding(newQuery)\cf2 \
            \cf7 //var tempArray:[Query] = newTopic.queryArray\cf2 \
            \cf7 //newQuery.topic?.topicName = newTopic.topicName\cf2 \
            \
            \cf7 //tempArray.append(newQuery)\cf2 \
            \cf7 //newTopic.queryArray = tempArray\cf2 \
            \cf7 //newTopic.addToQuery(newQuery)\
\
\cf2    \cf7 //.strokeBorder(Color(red:0.6, green:0.4, blue:0.2, opacity: 1.0),lineWidth: 8)\
\
this context menu could go inside body in table view, then it would have access to topic...\
//                    .contextMenu \{\cf2 \
\cf7 //                        Button \{ print("button tapped")    \}\cf2 \
\cf7 //                            label: \{Label("Choose button",systemImage: "globe")\}\cf2 \
\cf7 //                    \}   ///above code indent is in my own style to make more compact.  This context menu does work, plus it would have access to topic...\cf2 \
                \
check which device\
                
\f1\b \cf4 if
\f0\b0 \cf2  \cf8 UIDevice\cf2 .\cf9 current\cf2 .\cf9 userInterfaceIdiom\cf2  == .\cf9 pad\cf2  \{\
                    \cf9 print\cf2 (\cf10 "iPad device"\cf2 )\
                \} 
\f1\b \cf4 else
\f0\b0 \cf2  \{\
                    \cf9 print\cf2 (\cf10 "not iPad"\cf2 )\
                \}\
\
       \cf7 //Image(systemName: "sun.haze.fill") way to access system images\
\
\cf2    @\cf8 FetchRequest\cf2 (\
        sortDescriptors: [\cf8 NSSortDescriptor\cf2 (keyPath: \\\cf5 Topic\cf2 .\cf6 topicName\cf2 , ascending: 
\f1\b \cf4 true
\f0\b0 \cf2 )],\
        animation: .\cf9 default\cf2 )\
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf11 fetchedTopics\cf2 : \cf8 FetchedResults\cf2 <\cf5 Topic\cf2 > \cf7 //FetchRequest puts the results into here\cf2 \
this was the basic fetch request, but extension to Topic now used to populate topics variable with the fetched results.\
\
ALERT  CONTROLLER\
First set up the alert:\
\
                
\f1\b \cf4 let
\f0\b0 \cf2  alert = \cf8 UIAlertController\cf2 (title: \cf10 "Confirm delete this topic and all its queries?"\cf2 ,\
                               message: \cf10 ""\cf2 ,\
                               preferredStyle: .\cf9 alert\cf2 )\
                
\f1\b \cf4 let
\f0\b0 \cf2  cancelAction = \cf8 UIAlertAction\cf2 (title: \cf10 "Cancel"\cf2 , style: .\cf9 cancel\cf2 ) \{ (handler) 
\f1\b \cf4 in
\f0\b0 \cf2 \
                          \cf9 print\cf2 (\cf10 "tapped Cancel"\cf2 )\
                            \}\
                
\f1\b \cf4 let
\f0\b0 \cf2  deleteAction = \cf8 UIAlertAction\cf2 (title: \cf10 "OK"\cf2 , style: .\cf9 destructive\cf2 ) \{ (handler) 
\f1\b \cf4 in
\f0\b0 \cf2 \
                          \cf9 print\cf2 (\cf10 "tapped OK"\cf2 )\
                    
\f1\b \cf4 self
\f0\b0 \cf2 .\cf6 parent\cf2 .\cf6 onDelete\cf2 (indexPath.\cf9 row\cf2 )\
                    tableView.\cf9 deleteRows\cf2 (at: [indexPath], with: .\cf9 automatic\cf2 )\
                    actionPerformed(
\f1\b \cf4 true
\f0\b0 \cf2 )\
\
\
                            \}\
                alert.\cf9 addAction\cf2 (cancelAction)\
                alert.\cf9 addAction\cf2 (deleteAction)\
\
Then present the alert, but need a trick to find the root view controller first\
\
         \cf7 //      let rootViewController = UIApplication.shared.keyWindow?.rootViewController\cf2 \
          \cf7 //      rootViewController?.present(alert, animated: true, completion: nil)\
\
//an optional init?() can be done, need to do init?() and also within the init block eg: \cf2      \cf7 //guard topic != nil else \{return nil\}\
\
//early attempt for QuestionsView was to initialize a queries array, like so:\
\cf2    @\cf8 State\cf2  
\f1\b \cf4 var
\f0\b0 \cf2  \cf11 queries\cf2 : [\cf5 Query\cf2 ] \cf7 // = []   //if make this optional then have a problem with TableView because it's no longer a random access collection it seems...\cf2 \
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf11 topic\cf2 : \cf5 Topic\cf2 ?   \cf7 //@State didn't work here!      //may not need to be optional? There has to be a parent topic\cf2 \
    
\f1\b \cf4 init
\f0\b0 \cf2 (topic: \cf5 Topic\cf2 ?) \{   \cf7 //can avoid also passing in queryArray, can access all the queries from the topic here in QuestionsView\cf2 \
        
\f1\b \cf4 self
\f0\b0 \cf2 .\cf6 topic\cf2  = topic\
        
\f1\b \cf4 self
\f0\b0 \cf2 .\cf6 queries\cf2  = topic?.\cf6 queryArray\cf2  ?? []\
    \}\
    //the above queries array could be used in the TableView, $queries, but wouldn't update,of course, due it's coming from Entity topic, which was not changing, so didChangeObject was not called.\
\cf7 //create an empty entity like so;\
//@State var chosenTopic: Topic? //    //can also use :Topic() = []\
\
//found when tidying up:\
\cf2                 \cf7 //GOT IT, YEE HAH! not really so tricky, needed to think carefully about it! key was to have print statements to analyse alert control flow\
\
ACTIVITY CONTROLLER IMPLEMENTATION \
\pard\pardeftab720\partightenfactor0

\f2\fs26 \cf0 \cb1 \expnd0\expndtw0\kerning0
struct ShareSheetView: View \{\
    var body: some View \{\
        Button(action: actionSheet) \{\
            Image(systemName: "square.and.arrow.up")\
                .resizable()\
                .aspectRatio(contentMode: .fit)\
                .frame(width: 36, height: 36)\
        \}\
    \}\
    \
    func actionSheet() \{\
        guard let data = URL(string: "https://www.zoho.com") else \{ return \}\
        let av = UIActivityViewController(activityItems: [data], applicationActivities: nil)\
        UIApplication.shared.windows.first?.rootViewController?.present(av, animated: true, completion: nil)\
    \}\
\}
\f0\fs24 \cf7 \cb3 \kerning1\expnd0\expndtw0 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf7 //Code for development of QuestionView to use new colorPatch (done after sunset)\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1\b \cf12 \cb13 struct
\f0\b0 \cf14  \cf15 QuestionView\cf14 : \cf16 View\cf14  \{    \cf17 //this is the view used for each line of the Questions table\cf14 \
    \cf17 // @ObservedObject var query: Query       //not sure why not use @Binding here but it works!\cf14 \
    
\f1\b \cf12 var
\f0\b0 \cf14  \cf18 grade\cf14 : \cf16 Int\cf14  = \cf19 1\cf14 \
    
\f1\b \cf12 var
\f0\b0 \cf14  \cf18 body\cf14 : 
\f1\b \cf12 some
\f0\b0 \cf14  \cf16 View\cf14  \{\
        \cf17 // Text(query.question)\cf14 \
        \cf16 ZStack\cf14  \{\
            \cf16 HStack\cf14 \{\
               \cf17 //Image("redPatch")\cf14 \
                \cf20 gradeImage\cf14 (grade: \cf21 grade\cf14 )\
                    .\cf22 resizable\cf14 ()\
                    .\cf22 frame\cf14 (width: \cf19 30\cf14 , height: \cf19 30\cf14 , alignment: .\cf23 center\cf14 )\
                    .\cf22 padding\cf14 (.\cf23 leading\cf14 ,\cf19 1\cf14 )\
                \cf16 Spacer\cf14 ()\
            \}\
            \cf16 Text\cf14 (\cf24 "Example Question"\cf14 )\
                .\cf22 font\cf14 (.\cf22 custom\cf14 (\cf24 "Noteworthy Bold"\cf14 , size: \cf19 26\cf14  ))\
                .\cf22 foregroundColor\cf14 (.\cf23 white\cf14 )\
        \}\
        .\cf22 background\cf14 (\cf16 Image\cf14 (\cf24 "blackboard"\cf14 ))\
    \}\
\}\

\f1\b \cf12 func
\f0\b0 \cf14  \cf18 gradeImage\cf14 (grade: \cf16 Int\cf14 ) -> \cf16 Image\cf14  \{\
    
\f1\b \cf12 switch
\f0\b0 \cf14  grade \{\
    
\f1\b \cf12 case
\f0\b0 \cf14  \cf19 1\cf14 :\
        
\f1\b \cf12 return
\f0\b0 \cf14  \cf16 Image\cf14 (\cf24 "redPatch"\cf14 )\
    
\f1\b \cf12 case
\f0\b0 \cf14  \cf19 2\cf14 :\
        
\f1\b \cf12 return
\f0\b0 \cf14  \cf16 Image\cf14 (\cf24 "orangePatch"\cf14 )\
    
\f1\b \cf12 case
\f0\b0 \cf14  \cf19 3\cf14 :\
        
\f1\b \cf12 return
\f0\b0 \cf14  \cf16 Image\cf14 (\cf24 "greenPatch"\cf14 )\
    
\f1\b \cf12 default
\f0\b0 \cf14 :\
        
\f1\b \cf12 return
\f0\b0 \cf14  \cf16 Image\cf14 (\cf24 "nil"\cf14 )\
    \}\
\}\cf7 \cb3 \
								**************************\
At 15:40 UK local time on Sunday 5th Sept 2021 I finally released my Qcards app, version 1.0 - YEEHAH!\
								****************************\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1\b \cf4 struct
\f0\b0 \cf2  \cf25 ContentView\cf2 : \cf8 View\cf2  \{\
    @\cf8 State\cf2  
\f1\b \cf4 var
\f0\b0 \cf2  \cf11 grade\cf2 : \cf8 Int\cf2  = \cf26 1\cf2 \
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf11 body\cf2 : 
\f1\b \cf4 some
\f0\b0 \cf2  \cf8 View\cf2  \{\
        \cf8 ZStack\cf2 \{\
        \cf8 HStack\cf2 \{\
           \cf7 //Image("redPatch")\cf2 \
            \cf6 gradeImage\cf2 (grade: \cf6 grade\cf2 )\
                .\cf9 resizable\cf2 ()\
                .\cf9 frame\cf2 (width: \cf26 20\cf2 , height: \cf26 20\cf2 , alignment: .\cf9 center\cf2 )\
                .\cf9 padding\cf2 (\cf26 20\cf2 )\
                .\cf9 onTapGesture\cf2  \{\
                    
\f1\b \cf4 if
\f0\b0 \cf2  \cf6 grade\cf2  \cf9 <\cf2  \cf26 3\cf2  \{\
                    \cf6 grade\cf2  \cf9 +=\cf2  \cf26 1\cf2 \
                    \} 
\f1\b \cf4 else
\f0\b0 \cf2  \{\
                        \cf6 grade\cf2  = \cf26 1\cf2 \
                    \}\
                \}\
            \cf8 Spacer\cf2 ()\
        \}\cf7 \
\
**********\
Nav bar might be the issue here, with the jumping of the table:\
\pard\pardeftab720\partightenfactor0

\f3\fs30 \cf27 \cb28 \expnd0\expndtw0\kerning0
let\cf29  navBar = \cf27 self\cf29 .navigationController!.navigationBar\
\
\
\cf27 let\cf29  standardAppearance = \cf31 UINavigationBarAppearance\cf29 ()\
standardAppearance.configureWithOpaqueBackground()\
standardAppearance.backgroundImage = backImageForDefaultBarMetrics\
\
\
\cf27 let\cf29  compactAppearance = standardAppearance.copy()\
compactAppearance.backgroundImage = backImageForLandscapePhoneBarMetrics\
\
\
navBar.standardAppearance = standardAppearance\
navBar.scrollEdgeAppearance = standardAppearance\
navBar.compactAppearance = compactAppearance\
\cf27 if\cf29  \cf27 #available\cf29 (\cf27 iOS\cf29  \cf32 15.0\cf29 , *) \{ \cf33 // For compatibility with earlier iOS.\cf29 \
    navBar.compactScrollEdgeAppearance = compactAppearance\
\}
\f0\fs24 \cf7 \cb3 \kerning1\expnd0\expndtw0 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf7 \
\
\
\
\
\
}